// Vendor support
// ====================================================================
$legacy-support-for-ie : true;
$legacy-support-for-ie6 : $legacy-support-for-ie;
$legacy-support-for-ie7 : $legacy-support-for-ie;

// Base Colors
// ====================================================================
$color1: #FF0000; // Red
$color2: #FFBF00; // Orange
$color3: #FFFF00; // Yellow
$color4: #7FFF00; // Green
$color5: #007FFF; // Light Blue
$color6: #00FFFF; // Cyan
$color7: #0000FF; // Blue
$color8: #7F00FF; // Purple
$color9: #FF00FF; // Magenta
$color10: #000; // Black
$color11: #fff; // White
$color12: #6fdff3; //turquoise
$color13: #979797; //grey
$color-red: $color1;                                      // red
$color-light-red: lighten($color-red, 20);                // light red
$color-dark-red: darken($color-red, 20);                  // dark red
$color-orange: #FFBF00;                                   // orange
$color-light-orange: lighten($color-orange, 20);          // light orange
$color-dark-orange: darken($color-orange, 20);            // dark orange
$color-light-blue: $color6;                               // light blue
$color-blue: $color7;                                     // blue
$color-dark-blue: darken($color-blue, 20);                // dark yellow
$color-navy: #3c5876;                                     // navy
$color-light-navy: lighten($color-navy, 20);              // light navy
$color-dark-navy: darken($color-navy, 20);                // dark navy
$ng-user-status-bg: $color-navy;                          // user status background
$color-yellow: $color3;                                   // yellow
$color-light-yellow: lighten($color-yellow, 20);          // light yellow
$color-dark-yellow: darken($color-yellow, 20);            // dark yellow
$color-cyan: $color5;                                     // cyan
$color-light-cyan: lighten($color-cyan, 20);              // light cyan
$color-dark-cyan: darken($color-cyan, 20);                // dark cyan
$color-green: $color4;                                    // green
$color-light-green: lighten($color-green, 20);            // light green
$color-dark-green: darken($color-green, 20);              // dark green
$color-purple: $color8;                                   // purple
$color-light-purple: lighten($color-purple, 20);          // light purple
$color-dark-purple: darken($color-purple, 20);            // dark purple
$color-magenta: $color9;                                  // magenta
$color-light-magenta: lighten($color-magenta, 20);        // light green
$color-dark-magenta: darken($color-magenta, 20);          // dark green
$color-black: $color10;                                   // black
$color-white: $color11;                                   // white
$color-pink: pink;                                        // pink!
$color-light-pink: lighten($color-pink, 20);              // light pink!
$color-dark-pink: darken($color-pink, 20);                // dark pink!
$blockquote-bg: #faebbe;                                  // Yellowy
$color-link: #3D518F;                                     // dark custom blue
$color-turquoise: $color12;                                // turquoise
$color-light-turquoise: lighten($color-turquoise, 20);    // light turquoise
$color-dark-turquoise: darken($color-turquoise, 20);      // dark turquoise
$color-grey: $color13;                                   // grey
$color-light-grey: lighten($color-grey, 20);             // light grey
$color-lighter-grey: lighten($color-grey, 30);           // lighter grey
$color-dark-grey: darken($color-grey, 20);               // dark grey


// Component Base Color
// ====================================================================
$side-bar-background-color: transparentize($color-dark-grey, .20) !default;
$side-bar-caret-background-color: $side-bar-background-color !default;
$side-bar-border: 1px solid transparentize($color-black, .20) !default;
$side-bar-caret-border: 1px solid transparentize($color-black, .20) !default;
$side-bar-caret-color: $color-white !default;
$side-bar-panel-background-color: transparentize($color-lighter-grey, .20) !default;
$side-bar-panel-color: $color-black !default;

$side-bar-top-background-color: $side-bar-background-color !default;
$side-bar-top-caret-background-color: $side-bar-caret-background-color !default;
$side-bar-top-border: $side-bar-border !default;
$side-bar-top-caret-border: $side-bar-caret-border !default;
$side-bar-top-caret-color: $side-bar-caret-color !default;
$side-bar-top-panel-background-color: $side-bar-panel-background-color !default;
$side-bar-top-panel-color: $side-bar-panel-color !default;

$side-bar-bottom-background-color: $side-bar-background-color !default;
$side-bar-bottom-caret-background-color: $side-bar-caret-background-color !default;
$side-bar-bottom-border: $side-bar-border !default;
$side-bar-bottom-caret-border: $side-bar-caret-border !default;
$side-bar-bottom-caret-color: $side-bar-caret-color !default;
$side-bar-bottom-panel-background-color: $side-bar-panel-background-color !default;
$side-bar-bottom-panel-color: $side-bar-panel-color !default;

$side-bar-left-background-color: $side-bar-background-color !default;
$side-bar-left-caret-background-color: $side-bar-caret-background-color !default;
$side-bar-left-border: $side-bar-border !default;
$side-bar-left-caret-border: $side-bar-caret-border !default;
$side-bar-left-caret-color: $side-bar-caret-color !default;
$side-bar-left-panel-background-color: $side-bar-panel-background-color !default;
$side-bar-left-panel-color: $side-bar-panel-color !default;

$side-bar-right-background-color: $side-bar-background-color !default;
$side-bar-right-caret-background-color: $side-bar-caret-background-color !default;
$side-bar-right-border: $side-bar-border !default;
$side-bar-right-caret-border: $side-bar-caret-border !default;
$side-bar-right-caret-color: $side-bar-caret-color !default;
$side-bar-right-panel-background-color: $side-bar-panel-background-color !default;
$side-bar-right-panel-color: $side-bar-panel-color !default;

// Specific component mixin
// Side Bar Mixins
// ====================================================================
@mixin sidebar-top-style() {
  border-top: 0;
  border-left: $side-bar-top-border;
  border-right: $side-bar-top-border;
  border-bottom: $side-bar-top-border;
  background-color: $side-bar-top-background-color;
  @include std-expression(border-radius, 0px);
  @include std-expression(border-bottom-left-radius, 5px);
  @include std-expression(border-bottom-right-radius, 5px);
}

@mixin sidebar-bottom-style() {
  border-top: $side-bar-bottom-border;
  border-left: $side-bar-bottom-border;
  border-right: $side-bar-bottom-border;
  border-bottom: 0;
  background-color: $side-bar-bottom-background-color;
  @include std-expression(border-radius, 0px);
  @include std-expression(border-top-left-radius, 5px);
  @include std-expression(border-top-right-radius, 5px);
}

@mixin sidebar-left-style() {
  border-top: $side-bar-left-border;
  border-left: 0;
  border-right: $side-bar-left-border;
  border-bottom: $side-bar-left-border;
  background-color: $side-bar-left-background-color;
  @include std-expression(border-radius, 0px);
  @include std-expression(border-top-right-radius, 5px);
  @include std-expression(border-bottom-right-radius, 5px);
}

@mixin sidebar-right-style() {
  border-top: $side-bar-right-border;
  border-left: $side-bar-right-border;
  border-right: 0;
  border-bottom: $side-bar-right-border;
  background-color: $side-bar-right-background-color;
  @include std-expression(border-radius, 0px);
  @include std-expression(border-top-left-radius, 5px);
  @include std-expression(border-bottom-left-radius, 5px);
}

@mixin sidebar-caret-right-border() {
  border-top: $side-bar-left-border;
  border-left: $side-bar-left-border;
  border-right: $side-bar-left-border;
  border-bottom: 0;
}

@mixin sidebar-caret-left-border() {
  border-top: $side-bar-right-border;
  border-left: $side-bar-right-border;
  border-right: $side-bar-right-border;
  border-bottom: 0;
}

@mixin sidebar-caret-top-border() {
  border-top: $side-bar-bottom-border;
  border-left: $side-bar-bottom-border;
  border-right: $side-bar-bottom-border;
  border-bottom: 0;
}

@mixin sidebar-caret-bottom-border() {
  border-top: 0;
  border-left: $side-bar-top-border;
  border-right: $side-bar-top-border;
  border-bottom: $side-bar-top-border;
}

@mixin sidebar-caret-top() {
  @if (and var(--caret-v-gap)) {
    $caret-height: var(--caret-height);
    @include copy-var-value('--caret-v-gap', top);
  }
  @include sidebar-caret-top-border();
  border-radius: 0;
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
  background-color: $side-bar-bottom-caret-background-color;
  padding-left: 20px;
  padding-right: 20px;
  padding-top: 2px;
  padding-bottom: 5px;
  min-width: 150px;
}
@mixin sidebar-caret-bottom() {
  @if (var(--caret-v-gap)) {
    $caret-height: var(--caret-height);
    @include copy-var-value('--caret-v-gap', bottom);
  }
  @include sidebar-caret-bottom-border();
  border-radius: 0;
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
  background-color: $side-bar-top-caret-background-color;
  padding-left: 20px;
  padding-right: 20px;
  padding-top: 5px;
  padding-bottom: 2px;
  min-width: 150px;
}
@mixin sidebar-caret-left() {
  @if (var(--caret-h-gap)) {
    $caret-width: var(--caret-width);
    /*
    @if (and var(--caret-height) != '') {
    $caret-height: var(--caret-height);
      @if ($caret-width > $caret-height) {
        height: $caret-width;
        width: $caret-height;
      }
    }
    */
    @include copy-var-value('--caret-h-gap', left);
    float: left;
  }
  @include sidebar-caret-left-border();
  border-radius: 0;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
  background-color: $side-bar-right-caret-background-color;
  padding-left: 20px;
  padding-right: 20px;
  padding-top: 5px;
  padding-bottom: 2px;
  min-width: 150px;
  @include rotate-text(-90);
}
@mixin sidebar-caret-right() {
  @if (var(--caret-h-gap)) {
    $caret-width: var(--caret-width);
    /*
    @if (and var(--caret-height) != '') {
    $caret-height: var(--caret-height);
      @if ($caret-width > $caret-height) {
        height: $caret-width;
        width: $caret-height;
      }
    }
    */
    @include copy-var-value('--caret-h-gap', right);
    float: right;
  }
  @include sidebar-caret-right-border();
  border-radius: 0;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
  background-color: $side-bar-left-caret-background-color;
  padding-left: 20px;
  padding-right: 20px;
  padding-top: 5px;
  padding-bottom: 2px;
  min-width: 150px;
  @include rotate-text(90);
}

@mixin sidebar-caret-position($position, $location) {
  position: relative;
  @if($location == 'top' or $location == 'bottom') {
    @if (var(--caret-width) != '' and var(--caret-height) != '') {
      $caret-width: var(--caret-width);
      $caret-height: var(--caret-height);
      @if(position == 'top') {
        left: 5px;
      }
      @else if($position == 'bottom') {
        @include calc(right, $caret-width + 5px);
      }
      @else if($position == 'center') {
        @include calc(left, "(100% - " + $caret-width + ") / 2");
      }
      @else if($position == 'center-top') {
        @include calc(left, "(100% - " + $caret-width + ") / 4");
      }
      @else if($position == 'center-bottom') {
        @include calc(right, "(100% - " + $caret-width + ") / 4");
      }
    }

  }
  @else {
    @if (var(--caret-width) != '' and var(--caret-height) != '') {
      $caret-width: var(--caret-width);
      $caret-height: var(--caret-height);
      @if(position == 'top') {
        top: 5px;
      }
      @else if($position == 'bottom') {
        @include calc(bottom, $caret-width + 5px);
      }
      @else if($position == 'center') {
        @include calc(top, "(100% - " + $caret-width + ") / 2");
      }
      @else if($position == 'center-top') {
        @include calc(top, "(100% - " + $caret-width + ") / 4");
      }
      @else if($position == 'center-bottom') {
        @include calc(bottom, "(100% - " + $caret-width + ") / 4");
      }
    }
  }
}

// Base fonts
// ====================================================================
$blockquote: Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, "DejaVu Serif", "Bitstream Vera Serif", "Liberation Serif", Georgia, serif;
$main-font: Lato, 'Helvetica Neue', Arial, Helvetica, sans-serif, serif;
$header-font: ComingSoon, 'Helvetica Neue', Arial, Helvetica, sans-serif, serif;
$light-font: IndieFlower, 'Helvetica Neue', Arial, Helvetica, sans-serif, serif;
$condensed-font: IM_FELL_English_SC, 'Helvetica Neue', Arial, Helvetica, sans-serif, serif;

// Mixin variables
$defined-bs-type: border-box !default;

// Breakpoint variables
// ====================================================================
$XS: 18em; // roughly speaking, around 288px wide with 16px body font
$S: 30em; // roughly speaking, around 480px wide with 16px body font
$M: 43em; // roughly speaking, around 688px wide with 16px body font
$L: 57em; // roughly speaking, around 912px wide with 16px body font
$screen-app-xxs:                  320px !default;
$screen-app-xs:                  480px !default;
$screen-app-sm-3:                680px !default;
$screen-app-sm-2:                774px !default;
$screen-app-sm:                  835px !default;
$screen-app-md:                  992px !default;
$screen-app-lg:                  1200px !default;
$screen-sorting-bar-xs:          652px !default;
$screen-sorting-bar-sm:          760px !default;
$screen-sorting-bar-sm-2:        769px !default;
$screen-sorting-bar-md:          850px !default;
$screen-sorting-bar-lg:          996px !default;
$screen-generic-list-xlg:       1200px !default;
$screen-generic-list-lg:         996px !default;
$screen-generic-list-md:         850px !default;
$screen-generic-list-xs:         652px !default;

$transparent_default:               50 !default;

/* Login */
$form-inline-display:           block;
$form-inline-width:             100%;
$form-inline-overflow:          hidden;
$form-inline-group-display:     inline-flex;
$form-inline-display:           block;

/* Filter box */
$filter-box-width:              100%;

/* Generic dialog */
$generic-dialog-width:             100%;


/* Edit dialog */
$edit-dialog-width:             100%;

/* Edit form */
$edit-dialog-form-width:        100%;

/* User Status and login */
$login-logo-url-path:           './assets/images/logo.png' !default;

//Major directives

@mixin copy-var-value($custom, $property) {
  @if (var(unquote($custom))) {
      $value: var(unquote($custom));
      #{unquote($property)}: $value;
  };
}

@mixin copy-value($source, $target) {
  @if (unquote("#{unquote($source)}") != '') {
    $value: unquote("#{unquote($source)}");
    #{unquote($target)}: $value;
  }
}

@mixin rotate-text($rotateDeg) {
  $rotateRad: $rotateDeg * (3.14159 / 180);
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(SizingMethod='auto expand', M11=#{$rotateRad}, M12=#{$rotateRad * -1}, M21=#{$rotateRad}, M22=#{$rotateRad})"; /* IE8 */
  -moz-transform: rotate(#{$rotateDeg}deg);  /* FF3.5/3.6 */
  -o-transform: rotate(#{$rotateDeg}deg);  /* Opera 10.5 */
  -webkit-transform: rotate(#{$rotateDeg}deg);  /* Saf3.1+ */
  transform: rotate(#{$rotateDeg}deg);  /* Newer browsers (incl IE9) */
}

@mixin font-size($sizeValue: 16) {
  font-size: $sizeValue + px;
  font-size: ($sizeValue / 16) + rem;
}

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

$browser-context: 16  !default;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}

@mixin calc($property, $value) {
  @each $pre in -webkit-, -moz-, -o- {
    #{$property}: $pre + unquote( "calc(#{$value})" );
  }
  #{$property}: unquote("calc(#{$value})");
}

@mixin dinline() {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

/**
Usage sample:
.selector {
  @include with-prefix((
    column-count: 3,
    column-gap: 1.5em,
    column-rule: 2px solid hotpink
  ), webkit moz);
}
Produces :
.selector {
  -webkit-column-count: 3;
  -moz-column-count: 3;
  column-count: 3;
  -webkit-column-gap: 1.5em;
  -moz-column-gap: 1.5em;
  column-gap: 1.5em;
  -webkit-column-rule: 2px solid hotpink;
  -moz-column-rule: 2px solid hotpink;
  column-rule: 2px solid hotpink;
}
**/
@mixin with-prefix($declarations, $prefixes: (), $is-unquote: false) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      @if $is-unquote {
        #{'-' + $prefix + '-' + unquote($property)}: unquote($value);
      }
      @else {
        #{'-' + $prefix + '-' + unquote($property)}: $value;
      }
    }

    // Output standard non-prefixed declaration
    @if $is-unquote {
    #{$property}: $value;
      #{$property}: unquote($value);
    }
    @else {
      #{$property}: $value;
    }
  }
}

/**
Usage sample:
.selector {
  @include std-prefix((
    column-count: 3,
    column-gap: 1.5em,
    column-rule: 2px solid hotpink
  ));
}
Produces :
.selector {
  -webkit-column-count: 3;
  -moz-column-count: 3;
  -o-column-count: 3;
  column-count: 3;
  -webkit-column-gap: 1.5em;
  -moz-column-gap: 1.5em;
  -o-column-gap: 1.5em;
  column-gap: 1.5em;
  -webkit-column-rule: 2px solid hotpink;
  -moz-column-rule: 2px solid hotpink;
  column-rule: 2px solid hotpink;
}
**/
@mixin std-prefix($declarations, $is-unquote: false) {
  @include with-prefix($declarations, webkit moz o, $is-unquote);
}

/**
Usage sample:
.selector {
  @include with-expression(top, calc(100% - 5px), webkit moz);
}
Produces :
.selector {
  top: -webkit-calc(100% - 5px);
  top: -moz-calc(100% - 5px);
  top: calc(100% - 5px);
}
**/
@mixin with-expression($property, $expression, $prefixes: ()) {
  @each $pre in $prefixes {
    #{$property}: unquote("-#{$pre}-#{$expression}");
  }
  #{$property}: unquote(#{$expression});
}


/**
Usage sample:
.selector {
  @include with-expression(top, calc(100% - 5px));
}
Produces :
.selector {
  top: -webkit-calc(100% - 5px);
  top: -moz-calc(100% - 5px);
  top: -o-calc(100% - 5px);
  top: calc(100% - 5px);
}
**/
@mixin std-expression($property, $expression) {
  @include with-expression($property, $expression, webkit moz o);
}

